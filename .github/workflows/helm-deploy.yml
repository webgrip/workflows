name: Helm Deploy with Detailed Job Summary

on:
  workflow_call:
    secrets:
      DIGITAL_OCEAN_API_KEY:
        description: 'DigitalOcean API Key'
        required: true
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: string
        required: true
        default: 'staging'
      path:
        description: 'Path to the Helm chart you wish to deploy'
        type: string
        required: true

jobs:
  deploy-helm:
    name: 'Deploy Helm Charts'
    runs-on: arc-runner-set
    outputs:
      deploymentStats: ${{ steps.collect-stats.outputs.stats }}
      overallStats: ${{ steps.collect-stats.outputs.overall }}
    env:
      DO_CLUSTER_NAME: ${{ inputs.environment }}-doks-cluster
      DO_KUBECONFIG_FILE: './doks-kubeconfig'
      DO_CLI_VERSION: '1.119.1'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: latest

      - name: Install doctl (DigitalOcean CLI)
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v${{ env.DO_CLI_VERSION }}/doctl-${{ env.DO_CLI_VERSION }}-linux-amd64.tar.gz | tar -xz
          sudo mv doctl /usr/local/bin

      - name: Authenticate doctl
        run: doctl auth init --access-token ${{ secrets.DIGITAL_OCEAN_API_KEY }}

      - name: Fetch DOKS kubeconfig
        run: doctl kubernetes cluster kubeconfig save $DO_CLUSTER_NAME

      - name: Configure kubeconfig
        run: |
          export KUBECONFIG=$DO_KUBECONFIG_FILE

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.5/yq_linux_amd64 \
            -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # Deploy the single chart given by inputs.path. Record timing and status as CSV.
      - name: Deploy the specified Helm chart
        run: |
          echo "Chart,Namespace,Time,Status,Error" > deployment-stats.csv
          chartDir="${{ inputs.path }}"

          if [ ! -d "$chartDir" ]; then
            echo "ERROR: Directory '$chartDir' does not exist."
            exit 1
          fi

          chartName=$(basename "$chartDir")
          namespace=$(yq e '.namespace' "$chartDir/values.yaml" || echo "default")

          echo "Deploying chart '$chartName' to namespace '$namespace'..."
          start=$(date +%s)

          if helm dependency update "$chartDir" && \
             helm upgrade --install "$chartName" "$chartDir" \
               --namespace "$namespace" \
               --create-namespace \
               --values "$chartDir/values.yaml" \
               --wait --timeout 10m --force; then
            status="Success ✅"
            error=""
          else
            status="Failed ❌"
            error="Deployment failed"
          fi

          end=$(date +%s)
          duration=$((end - start))
          duration_formatted=$(printf "%02d:%02d:%02d" $((duration/3600)) $(((duration%3600)/60)) $((duration%60)))

          # Append CSV row
          echo "$chartName,$namespace,$duration_formatted,$status,$error" >> deployment-stats.csv

          # For a single chart, overall time = this chart's time
          echo "Overall, 1 chart deployed in $duration_formatted ⏱️" > overall-stats.txt

      # Collect stats and expose them as outputs
      - name: Collect Deployment Stats
        id: collect-stats
        run: |
          stats=$(cat deployment-stats.csv)
          overall=$(cat overall-stats.txt)
          {
            echo "stats<<EOF"
            echo "$stats"
            echo "EOF"
            echo "overall<<EOF"
            echo "$overall"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  set-job-summary:
    name: Create Detailed Job Summary
    needs: deploy-helm
    runs-on: arc-runner-set
    steps:
      - name: Generate Job Summary with Deployment Stats
        uses: actions/github-script@v7
        with:
          script: |
            // Retrieve CSV data and overall summary from environment variables
            const statsCSV = process.env.DEPLOYMENT_STATS || '';
            const overallStats = process.env.OVERALL_STATS || '';

            core.summary
              .addHeading('Deployment Overview', 2)
              .addRaw(overallStats)
              .addEOL()
              .addSeparator();

            if (!statsCSV) {
              core.summary
                .addRaw('No deployment statistics available.')
                .addEOL();
            } else {
              const lines = statsCSV.trim().split('\n');
              const header = lines.shift().split(',');
              const dataRows = lines.map(line => line.split(','));

              core.summary
                .addHeading('Per-Chart Deployment Details', 3)
                .addTable([header, ...dataRows]);
            }

            await core.summary.write();
        env:
          DEPLOYMENT_STATS: ${{ needs.deploy-helm.outputs.deploymentStats }}
          OVERALL_STATS: ${{ needs.deploy-helm.outputs.overall }}
