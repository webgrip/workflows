name: '[Workflow] Sync Template Files to Application Repos'

on:
  workflow_call:
    inputs:
      topic:
        type: string
        description: 'GitHub topic to filter repositories (default: application)'
        required: false
        default: 'application'
      dry_run:
        type: boolean
        description: 'Perform a dry run without making changes'
        required: false
        default: false
      paths:
        type: string
        description: 'Comma-separated list of file paths to sync'
        required: false
        default: ''

jobs:
  sync-files:
    name: 'Sync Template Files'
    runs-on: arc-runner-set

    steps:
      - name: Checkout template repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt update
          apt install -y gh

      - name: Find repositories with topic
        id: find-repos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOPIC: ${{ github.event.inputs.topic || 'application' }}
        run: |
          echo "Finding repositories with topic: $TOPIC"

          # Get repositories with the specified topic in the same organization
          # Load the GraphQL query from a file to avoid complex quoting that breaks under act
          REPOS=$(gh api graphql -f query="$(cat .github/workflows/find_repos_query.graphql)" -f org="${{ github.repository_owner }}" --jq '.data.organization.repositories.nodes[] | select(.repositoryTopics.nodes[].topic.name == "'"$TOPIC"'" ) | .name')

          if [ -z "$REPOS" ]; then
            echo "No repositories found with topic: $TOPIC"
            echo "repos=[]" >> $GITHUB_OUTPUT
          else
            echo "Found repositories:"
            echo "$REPOS"
            # Convert to JSON array
            REPOS_JSON=$(echo "$REPOS" | jq -R -s -c 'split("\n")[:-1]')
            echo "repos=$REPOS_JSON" >> $GITHUB_OUTPUT
          fi

      - name: Sync to repositories
        if: steps.find-repos.outputs.repos != '[]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          REPOS='${{ steps.find-repos.outputs.repos }}'
          echo "Syncing to repositories: $REPOS"

          # Define files to sync with their destination paths
          declare -A FILES_TO_SYNC=(
            [".editorconfig"]=".editorconfig"
            [".gitignore"]=".gitignore"
            [".releaserc.json"]=".releaserc.json"
            [".vscode/settings.json"]=".vscode/settings.json"
            [".github/workflows/on_docs_change.yml"]=".github/workflows/on_docs_change.yml"
            [".github/workflows/on_source_change.yml"]=".github/workflows/on_source_change.yml"
            [".github/workflows/on_workflow_files_change.yml"]=".github/workflows/on_workflow_files_change.yml"
          )

          # Create sync script
          cat > sync_script.sh << 'EOF'
          #!/bin/bash
          set -e

          REPO_NAME=$1
          DRY_RUN=$2
          TEMPLATE_REPO="${{ github.repository }}"
          ORG="${{ github.repository_owner }}"

          echo "Processing repository: $REPO_NAME"

          if [ "$DRY_RUN" = "true" ]; then
            echo "DRY RUN: Would sync files to $ORG/$REPO_NAME"
            return 0
          fi

          # Clone the target repository
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"

          echo "Cloning $ORG/$REPO_NAME..."
          gh repo clone "$ORG/$REPO_NAME" .

          # Check if there's already a sync branch
          BRANCH_NAME="feat/sync-template-files-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"

          CHANGES_MADE=false

          # Copy files from template
          declare -A FILES_TO_SYNC=(
            [".editorconfig"]=".editorconfig"
            [".gitignore"]=".gitignore"
            [".releaserc.json"]=".releaserc.json"
            [".vscode/settings.json"]=".vscode/settings.json"
            [".github/workflows/on_docs_change.yml"]=".github/workflows/on_docs_change.yml"
            [".github/workflows/on_source_change.yml"]=".github/workflows/on_source_change.yml"
            [".github/workflows/on_workflow_files_change.yml"]=".github/workflows/on_workflow_files_change.yml"
          )

          for SOURCE_FILE in "${!FILES_TO_SYNC[@]}"; do
            DEST_FILE="${FILES_TO_SYNC[$SOURCE_FILE]}"

            if [ -f "$GITHUB_WORKSPACE/$SOURCE_FILE" ]; then
              echo "Syncing $SOURCE_FILE -> $DEST_FILE"

              # Create destination directory if it doesn't exist
              DEST_DIR=$(dirname "$DEST_FILE")
              if [ "$DEST_DIR" != "." ]; then
                mkdir -p "$DEST_DIR"
              fi

              # Check if file exists and compare content
              if [ -f "$DEST_FILE" ]; then
                if ! cmp -s "$GITHUB_WORKSPACE/$SOURCE_FILE" "$DEST_FILE"; then
                  echo "Updating $DEST_FILE (content differs)"
                  cp "$GITHUB_WORKSPACE/$SOURCE_FILE" "$DEST_FILE"
                  CHANGES_MADE=true
                else
                  echo "Skipping $DEST_FILE (no changes)"
                fi
              else
                echo "Creating new file $DEST_FILE"
                cp "$GITHUB_WORKSPACE/$SOURCE_FILE" "$DEST_FILE"
                CHANGES_MADE=true
              fi
            else
              echo "Warning: Source file $SOURCE_FILE not found in template"
            fi
          done

          if [ "$CHANGES_MADE" = true ]; then
            echo "Changes detected, creating pull request..."

            git add .
            git config user.name "Template Sync Bot"
            git config user.email "noreply@github.com"
            git commit -m "feat: sync template files from $TEMPLATE_REPO@${{ github.sha }}"

            git push origin "$BRANCH_NAME"

            # Create pull request
            gh pr create \
              --title "feat: sync template files from $TEMPLATE_REPO" \
              --body "This automated pull request syncs template files from the application template repository.

            ## Changes
            This PR updates the following template files:
            - Workflow files (`.github/workflows/`)
            - Configuration files (`.editorconfig`, `.gitignore`, `.releaserc.json`)
            - VSCode settings (`.vscode/settings.json`)

            ## ⚠️ Conflict Handling
            **Important**: Template files take precedence over local modifications. If you have made customizations to any of these files, they will be overwritten by the template version.

            **Before merging**:
            1. Review each changed file carefully
            2. Identify any repository-specific customizations that need to be preserved
            3. Either modify this PR or make follow-up changes to restore necessary customizations

            ## Review Instructions
            Please review the changes to ensure they are compatible with your application-specific requirements.

            ## Source
            Template Repository: \`$TEMPLATE_REPO\`
            Template Commit: \`${{ github.sha }}\`

            ## Automated Sync
            This PR was created automatically by the template sync workflow. If you don't want to receive these updates, remove the \`application\` topic from your repository." \
              --head "$BRANCH_NAME" \
              --base "main"

            echo "Pull request created successfully"
          else
            echo "No changes detected, skipping pull request creation"
          fi

          cd /
          rm -rf "$TEMP_DIR"
          EOF

          chmod +x sync_script.sh

          # Process each repository
          echo "$REPOS" | jq -r '.[]' | while read -r repo; do
            echo "Processing repository: $repo"
            ./sync_script.sh "$repo" "$DRY_RUN" || {
              echo "Error processing $repo, continuing with next repository..."
              continue
            }
          done

      - name: Summary
        if: always()
        run: |
          if [ '${{ steps.find-repos.outputs.repos }}' = '[]' ]; then
            echo "## Summary" >> $GITHUB_STEP_SUMMARY
            echo "No repositories found with topic: ${{ github.event.inputs.topic || 'application' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To enable template sync for a repository, add the \`application\` topic to it." >> $GITHUB_STEP_SUMMARY
          else
            echo "## Summary" >> $GITHUB_STEP_SUMMARY
            echo "Template sync completed for repositories with topic: ${{ github.event.inputs.topic || 'application' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Processed Repositories:" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.find-repos.outputs.repos }}' | jq -r '.[]' | while read -r repo; do
              echo "- $repo" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.dry_run || 'false' }}" = "true" ]; then
              echo "_This was a dry run - no actual changes were made._" >> $GITHUB_STEP_SUMMARY
            fi
          fi
