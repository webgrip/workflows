name: Helm Deploy with Detailed Job Summary

on:
  workflow_call:
    secrets:
      DOCKER_USERNAME:
        description: 'Docker Username'
        required: true
      DOCKER_TOKEN:
        description: 'Docker Token'
        required: true
      DIGITAL_OCEAN_API_KEY:
        description: 'DigitalOcean API Key'
        required: true
      SOPS_AGE_KEY:
        description: 'SOPS Age private key'
        required: false
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: string
        required: true
        default: 'staging'
      path:
        description: 'Path to the Helm chart you wish to deploy'
        type: string
        required: true
      tag:
        description: 'Tag to deploy'
        type: string
        required: false

jobs:
  deploy-helm:
    container:
      image: webgrip/helm-deploy:latest
      credentials:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    name: ${{ inputs.path }}
    runs-on: arc-runner-set
    env:
      DO_CLUSTER_NAME: webgrip-${{ inputs.environment }}-cluster
      DO_KUBECONFIG_FILE: './doks-kubeconfig'
      SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY || '' }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Authenticate doctl
        run: doctl auth init --access-token ${{ secrets.DIGITAL_OCEAN_API_KEY }}

      - name: Fetch DOKS kubeconfig
        run: doctl kubernetes cluster kubeconfig save $DO_CLUSTER_NAME

      - name: Configure kubeconfig
        run: |
          export KUBECONFIG=$DO_KUBECONFIG_FILE

      - name: Decrypt SOPS file
        if: ${{ env.SOPS_AGE_KEY }}
        id: decrypt_sops
        run: |
          chartDir="${{ inputs.path }}"
          # Set the SOPS age key for decryption
          export SOPS_AGE_KEY=${{ secrets.SOPS_AGE_KEY }}
          if [ -f "$chartDir/values.sops.yaml" ]; then
            echo "Decrypting SOPS file: $chartDir/values.sops.yaml"
            sops --decrypt "$chartDir/values.sops.yaml" > "$chartDir/values.dec.yaml"
            echo "sops_used=true" >> "$GITHUB_OUTPUT"
          else
            echo "No SOPS file found at $chartDir/values.sops.yaml, skipping."
            echo "sops_used=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Deploy the specified Helm chart
        id: deploy
        continue-on-error: true
        run: |
          set +e  # Allow the script to continue on errors

          echo "Chart,Namespace,Time,Status,Error" > deployment-stats.csv
          chartDir="${{ inputs.path }}"

          if [ ! -d "$chartDir" ]; then
            echo "ERROR: Directory '$chartDir' does not exist."
            echo "paths=[]" >> $GITHUB_OUTPUT
            echo "exit_code=1" >> $GITHUB_OUTPUT
            echo "NonexistentDir,default,00:00:00,Failed ❌,Directory not found" >> deployment-stats.csv
            exit 0
          fi

          chartName=$(basename "$chartDir")
          # Default to values.yaml for namespace unless a SOPS file is used
          namespace=$(yq e '.namespace' "$chartDir/values.yaml" 2>/dev/null || echo "default")

          # Prefer the decrypted values file if it exists
          if [ -f "$chartDir/values.dec.yaml" ]; then
            namespace=$(yq e '.namespace' "$chartDir/values.dec.yaml" 2>/dev/null || echo "default")
            valuesFile="$chartDir/values.dec.yaml"
          elif [ -f "$chartDir/values.yaml" ]; then
            valuesFile="$chartDir/values.yaml"
          else
            echo "WARNING: No values file found, continuing with Helm defaults."
            valuesFile=""
          fi

          echo "Deploying chart '$chartName' to namespace '$namespace'..."
          start=$(date +%s)

          helm dependency update "$chartDir"

          helmCmd="helm upgrade --install \"$chartName\" \"$chartDir\" \
            --namespace \"$namespace\" \
            --create-namespace \
            --wait --timeout 10m --force \
            --atomic --cleanup-on-fail"

          if [ -n "$valuesFile" ]; then
            helmCmd="$helmCmd --values \"$valuesFile\""
          fi

          if [ -n "${{ inputs.tag }}" ]; then
            helmCmd="$helmCmd --set n8n.image.tag=${{ inputs.tag }}"
          fi

          # Capture the Helm output (stdout + stderr)
          helmOutput=$(eval "$helmCmd" 2>&1)
          helmExitCode=$?

          if [ $helmExitCode -eq 0 ]; then
            status="Success ✅"
            error=""
            exit_code=0
          else
            status="Failed ❌"
            error="Deployment failed"
            exit_code=1
          fi

          end=$(date +%s)
          duration=$((end - start))
          duration_formatted=$(printf "%02d:%02d:%02d" $((duration/3600)) $(((duration%3600)/60)) $((duration%60)))

          echo "$chartName,$namespace,$duration_formatted,$status,$error" >> deployment-stats.csv
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

          # Publish the Helm output for later steps
          #  - Note: make sure to properly handle multi-line outputs.
          echo "helm_output<<EOF" >> $GITHUB_OUTPUT
          echo "$helmOutput" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ $exit_code -eq 0 ]; then
            echo "Overall, 1 chart deployed in $duration_formatted ⏱️" > overall-stats.txt
          else
            echo "Overall, 1 chart deployment failed after $duration_formatted ⏱️" > overall-stats.txt
          fi

      - name: Collect Deployment Stats
        id: collect-stats
        if: always()
        run: |
          stats=$(cat deployment-stats.csv)
          overall=$(cat overall-stats.txt)
          {
            echo "stats<<EOF"
            echo "$stats"
            echo "EOF"
            echo "overall<<EOF"
            echo "$overall"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Render Helm templates for summary
        if: always()
        shell: bash -eo pipefail {0}
        run: |
          set -Eeuo pipefail
          chartDir="${{ inputs.path }}"
          chartName=$(basename "$chartDir")
          rendered="rendered-manifests.yaml"
          valuesFile=""

          if [ -f "$chartDir/values.dec.yaml" ]; then
            valuesFile="$chartDir/values.dec.yaml"
          elif [ -f "$chartDir/values.yaml" ]; then
            valuesFile="$chartDir/values.yaml"
          fi

          ns=$(yq e '.namespace' "$chartDir/values.yaml" 2>/dev/null || echo default)

          helmCmd=(helm template "$chartName" "$chartDir" --namespace "$ns")
          if [ -n "$valuesFile" ]; then
            helmCmd+=(--values "$valuesFile")
          fi
          if [ -n "${{ inputs.tag }}" ]; then
            helmCmd+=(--set "n8n.image.tag=${{ inputs.tag }}")
          fi

          echo "Rendering helm templates to $rendered"
          "${helmCmd[@]}" > "$rendered" 2>&1 || true

          if [ -d "$chartDir/templates" ]; then
            find "$chartDir/templates" -maxdepth 1 -type f -print > template-files.txt || true
          else
            : > template-files.txt
          fi

          cp -f "$chartDir/Chart.yaml" chart-Chart.yaml 2>/dev/null || true
          if [ -n "$valuesFile" ]; then cp -f "$valuesFile" chart-values.yaml 2>/dev/null || true; fi

      - name: Generate Job Summary with Deployment Stats
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const statsCSV = process.env.DEPLOYMENT_STATS || '';
            const overallStats = process.env.OVERALL_STATS || '';
            const helmOutput = process.env.HELM_OUTPUT || '';
            const chartDir = process.env.CHART_DIR || '';
            const renderedPath = path.join(process.cwd(), 'rendered-manifests.yaml');
            const templateListPath = path.join(process.cwd(), 'template-files.txt');
            const chartYamlPath = path.join(process.cwd(), 'chart-Chart.yaml');
            const chartValuesPath = path.join(process.cwd(), 'chart-values.yaml');
            const sopsUsed = (process.env.SOPS_USED || '').toLowerCase() === 'true';

            core.summary
              .addHeading('Deployment Overview', 2)
              .addRaw(overallStats)
              .addEOL()
              .addSeparator();

            if (!statsCSV) {
              core.summary
                .addRaw('No deployment statistics available.')
                .addEOL();
            } else {
              const lines = statsCSV.trim().split('\n');
              const header = lines.shift().split(',');
              const dataRows = lines.map(line => line.split(','));

              core.summary
                .addHeading('Per-Chart Deployment Details', 3)
                .addTable([header, ...dataRows]);
            }

            if (helmOutput) {
              core.summary
                .addHeading('Helm Command Output', 3)
                .addCodeBlock(helmOutput, 'bash');
            }

            // Add Chart metadata and templates
            try {
              if (fs.existsSync(chartYamlPath)) {
                const chartYaml = fs.readFileSync(chartYamlPath, 'utf8');
                core.summary.addHeading('Chart.yaml', 3).addCodeBlock(chartYaml, 'yaml');
              }
            } catch (e) {}

            try {
              if (fs.existsSync(chartValuesPath)) {
                if (sopsUsed) {
                  core.summary.addHeading('Values used for render', 3).addRaw('Suppressed (SOPS secrets in use)').addEOL();
                } else {
                  const chartValues = fs.readFileSync(chartValuesPath, 'utf8');
                  core.summary.addHeading('Values used for render', 3).addCodeBlock(chartValues, 'yaml');
                }
              }
            } catch (e) {}

            try {
              if (fs.existsSync(templateListPath)) {
                const files = fs.readFileSync(templateListPath, 'utf8').trim().split('\n').filter(Boolean);
                if (files.length) {
                  core.summary.addHeading('Chart template files', 3);
                  for (const f of files) {
                    try {
                      const content = fs.readFileSync(f, 'utf8');
                      const name = path.basename(f);
                      core.summary.addHeading(name, 4).addCodeBlock(content, 'yaml');
                    } catch (e) {}
                  }
                }
              }
            } catch (e) {}

            // Add rendered manifests (suppress if secrets present)
            try {
              if (fs.existsSync(renderedPath)) {
                const rendered = fs.readFileSync(renderedPath, 'utf8');
                const containsSecret = /\bkind:\s+Secret\b/i.test(rendered);
                if (sopsUsed || containsSecret) {
                  core.summary.addHeading('Rendered Kubernetes Manifests', 3)
                    .addRaw('Suppressed due to presence of secrets (SOPS or Secret kind detected).');
                } else {
                  core.summary.addHeading('Rendered Kubernetes Manifests', 3).addCodeBlock(rendered, 'yaml');
                }
              }
            } catch (e) {}

            await core.summary.write();
        env:
          DEPLOYMENT_STATS: ${{ steps.collect-stats.outputs.stats }}
          OVERALL_STATS: ${{ steps.collect-stats.outputs.overall }}
          HELM_OUTPUT: ${{ steps.deploy.outputs.helm_output }}
          SOPS_USED: ${{ steps.decrypt_sops.outputs.sops_used }}

      - name: Fail if Helm Failed
        if: steps.deploy.outputs.exit_code == '1'
        run: |
          echo "Deployment was not successful. Marking job as failed."
          exit 1
