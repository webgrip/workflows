name: '[Call] Create repository from template'

on:
  workflow_call:
    inputs:
      template_owner:
        description: 'Owner of the template repository'
        type: string
        required: true
      template_repo:
        description: 'Name of the template repository'
        type: string
        required: true
      new_repo_name:
        description: 'Name of the new repository to be created'
        type: string
        required: true
      replace_values:
        description: 'YAML formatted string of values to replace in the new repository'
        type: string
        required: false
    secrets:
      WEBGRIP_CI_CLIENT_ID:
        description: "GitHub App ID (numeric)"
        required: true
      WEBGRIP_CI_APP_PRIVATE_KEY:
        description: "GitHub App private key (PEM)"
        required: true

jobs:
  create-repo-from-template:
    name: 'Create repository from template'
    runs-on: arc-runner-set

    env:
      ORG: ${{ github.repository_owner }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WEBGRIP_CI_CLIENT_ID: ${{ secrets.WEBGRIP_CI_CLIENT_ID }}
      WEBGRIP_CI_APP_PRIVATE_KEY: ${{ secrets.WEBGRIP_CI_APP_PRIVATE_KEY }}
      APP_BOT_SLUG: ${{ vars.WEBGRIP_CI_BOT_NAME }}

    steps:
      - name: Silence local git init default-branch hint
        run: git config --global init.defaultBranch main

      - name: Mint GitHub App installation token (owner-based)
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.WEBGRIP_CI_CLIENT_ID }}
          private-key: ${{ secrets.WEBGRIP_CI_APP_PRIVATE_KEY }}
          owner: ${{ env.ORG }}

      - name: Create repo from template (no history) + set topics + merge options
        id: gen
        uses: actions/github-script@v7
        with:
            github-token: ${{ steps.app-token.outputs.token }}
            script: |
                const org = process.env.ORG;
                const name = process.env.NEW_REPO;
                const isPrivate = (process.env.VISIBILITY !== 'public');
                const { data: repo } = await github.request('POST /repos/{template_owner}/{template_repo}/generate', {
                    template_owner: process.env.TEMPLATE_OWNER,
                    template_repo: process.env.TEMPLATE_REPO,
                    owner: org,
                    name,
                    private: isPrivate,
                    include_all_branches: false
                });
                core.info(`Generated repo: ${repo.full_name}`);
                const topics = ["application"];
                await github.request('PUT /repos/{owner}/{repo}/topics', {
                    owner: org,
                    repo: name,
                    names: topics
                });
                core.info(`Added topics: ${topics.join(", ")}`);
                await github.request('PATCH /repos/{owner}/{repo}', {
                    owner: process.env.ORG,
                    repo: process.env.NEW_REPO,
                    allow_squash_merge: false,
                    allow_merge_commit: false,
                    allow_rebase_merge: true,
                    delete_branch_on_merge: true
                });
                core.info(`Configured merge options for ${org}/${name}.`);

      - name: Wait for initial default branch
        id: wait-default-branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;
            const start = Date.now();
            const timeoutMs = 180_000;
            let sleepMs = 2_000;
            const maxSleepMs = 10_000;
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));
            async function ready() {
              const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
              const branch = repoData.default_branch || 'main';
              try {
                const { data: b } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', { owner, repo, branch });
                if (b?.commit?.sha) return { branch, sha: b.commit.sha };
              } catch {}
              try {
                const { data: c } = await github.request('GET /repos/{owner}/{repo}/commits/{ref}', { owner, repo, ref: branch });
                if (c?.sha) return { branch, sha: c.sha };
              } catch {}
              return null;
            }
            while (Date.now() - start < timeoutMs) {
              const info = await ready();
              if (info) {
                core.setOutput('initial_branch', info.branch);
                core.setOutput('initial_sha', info.sha);
                core.exportVariable('INITIAL_BRANCH', info.branch);
                core.exportVariable('INITIAL_SHA', info.sha);
                return;
              }
              await sleep(sleepMs);
              sleepMs = Math.min(maxSleepMs, Math.floor(sleepMs * 1.6));
            }
            core.setFailed('Timed out waiting for the new repo default branch and first commit.');

      - name: Set default branch to development
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.request('PATCH /repos/{owner}/{repo}', {
              owner: process.env.ORG,
              repo: process.env.NEW_REPO,
              default_branch: 'development'
            });
            core.info('Default branch set to development.');