name: "[Call] Create repository from template"

on:
  workflow_call:
    inputs:
      template_owner:
        description: "Owner of the template repository"
        type: string
        required: true
      template_repo:
        description: "Name of the template repository"
        type: string
        required: true
      new_repo_name:
        description: "Name of the new repository to be created"
        type: string
        required: true
      visibility:
        description: "Visibility of the new repository"
        type: string
        required: true
        default: "private"
      topics:
        description: "Comma-separated list of topics to apply to the new repository"
        type: string
        required: false
        default: ""
    secrets:
      WEBGRIP_CI_CLIENT_ID:
        description: "GitHub App ID (numeric)"
        required: true
      WEBGRIP_CI_APP_PRIVATE_KEY:
        description: "GitHub App private key (PEM)"
        required: true

permissions:
  contents: write
  pull-requests: write
  actions: write
  pages: write

jobs:
  create-repo-from-template:
    name: "Create repository"
    runs-on: arc-runner-set

    env:
      ORG: ${{ github.repository_owner }}
      NEW_REPO: ${{ inputs.new_repo_name }}
      VISIBILITY: ${{ inputs.visibility }}
      TOPICS: ${{ inputs.topics }}
      TEMPLATE_OWNER: ${{ inputs.template_owner }}
      TEMPLATE_REPO: ${{ inputs.template_repo }}

    steps:
      - name: Mint GitHub App installation token (owner-based)
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.WEBGRIP_CI_CLIENT_ID }}
          private-key: ${{ secrets.WEBGRIP_CI_APP_PRIVATE_KEY }}
          owner: ${{ env.ORG }}

      - name: Create repo from template + topics + merge options
        id: gen
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const name = process.env.NEW_REPO;
            const isPrivate = (process.env.VISIBILITY !== 'public');

            const { data: repo } = await github.request('POST /repos/{template_owner}/{template_repo}/generate', {
              template_owner: process.env.TEMPLATE_OWNER,
              template_repo: process.env.TEMPLATE_REPO,
              owner: org,
              name,
              private: isPrivate,
              include_all_branches: false
            });
            core.info(`Generated repo: ${repo.full_name}`);

            const topics = (process.env.TOPICS || '')
              .split(',')
              .map(t => t.trim())
              .filter(Boolean);
            if (topics.length) {
              await github.request('PUT /repos/{owner}/{repo}/topics', { owner: org, repo: name, names: topics });
              core.info(`Added topics: ${topics.join(', ')}`);
            } else {
              core.info('No topics provided.');
            }

            await github.request('PATCH /repos/{owner}/{repo}', {
              owner: org,
              repo: name,
              allow_squash_merge: true,
              allow_merge_commit: false,
              allow_rebase_merge: true,
              delete_branch_on_merge: false
            });
            core.info(`Configured merge options for ${org}/${name}.`);

      - name: Wait for initial default branch
        id: wait-default-branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;
            const start = Date.now();
            const timeoutMs = 180_000;
            let sleepMs = 2_000;
            const maxSleepMs = 10_000;
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            async function ready() {
              const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
              const branch = repoData.default_branch || 'main';
              try {
                const { data: b } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', { owner, repo, branch });
                if (b?.commit?.sha) return { branch, sha: b.commit.sha };
              } catch {}
              try {
                const { data: c } = await github.request('GET /repos/{owner}/{repo}/commits/{ref}', { owner, repo, ref: branch });
                if (c?.sha) return { branch, sha: c.sha };
              } catch {}
              return null;
            }

            while (Date.now() - start < timeoutMs) {
              const info = await ready();
              if (info) {
                core.setOutput('initial_branch', info.branch);
                core.setOutput('initial_sha', info.sha);
                core.exportVariable('INITIAL_BRANCH', info.branch);
                core.exportVariable('INITIAL_SHA', info.sha);
                return;
              }
              await sleep(sleepMs);
              sleepMs = Math.min(maxSleepMs, Math.floor(sleepMs * 1.6));
            }
            core.setFailed('Timed out waiting for the new repo default branch and first commit.');

      - name: Create development branch from initial commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;
            const sha   = process.env.INITIAL_SHA;

            try {
              await github.request('GET /repos/{owner}/{repo}/branches/{branch}', { owner, repo, branch: 'development' });
              core.info('Branch "development" already exists.');
            } catch (e) {
              if (e.status === 404) {
                await github.request('POST /repos/{owner}/{repo}/git/refs', {
                  owner, repo, ref: 'refs/heads/development', sha
                });
                core.info(`Created branch "development" at ${sha}.`);
              } else { throw e; }
            }

      - name: Set default branch to development
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.request('PATCH /repos/{owner}/{repo}', {
              owner: process.env.ORG,
              repo: process.env.NEW_REPO,
              default_branch: 'development'
            });
            core.info('Default branch set to development.');

      - name: Create or update ruleset (main & development)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;

            async function upsert() {
              const payload = {
                name: "Default protections (main & development)",
                target: "branch",
                enforcement: "active",
                conditions: { ref_name: { include: ["refs/heads/main", "refs/heads/development"], exclude: [] } },
                bypass_actors: [{ actor_id: 1, actor_type: "OrganizationAdmin", bypass_mode: "pull_request" }],
                rules: [
                  { type: "pull_request",
                    parameters: {
                      automatic_copilot_code_review_enabled: true,
                      dismiss_stale_reviews_on_push: true,
                      require_code_owner_review: true,
                      require_last_push_approval: false,
                      required_approving_review_count: 1,
                      required_review_thread_resolution: true
                    }
                  },
                  { type: "branch_name_pattern",
                    parameters: { name: "Branch name pattern", negate: false, operator: "regex",
                      pattern: "^((main|development)|(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert)\\/.+)$" } },
                  { type: "non_fast_forward" },
                  { type: "required_linear_history" },
                  { type: "deletion" }
                ]
              };

              const list = await github.request('GET /repos/{owner}/{repo}/rulesets', { owner, repo });
              const existing = (list.data || []).find(r => r.name === payload.name);
              if (existing) {
                await github.request('PATCH /repos/{owner}/{repo}/rulesets/{ruleset_id}', { owner, repo, ruleset_id: existing.id, ...payload });
                core.info(`Updated ruleset '${payload.name}' (id: ${existing.id}).`);
              } else {
                const created = await github.request('POST /repos/{owner}/{repo}/rulesets', { owner, repo, ...payload });
                core.info(`Created ruleset '${payload.name}' (id: ${created.data.id}).`);
              }
            }
            await upsert();

      - name: Return pertinent information
        if: >
          ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const repoUrl = `https://github.com/${process.env.ORG}/${process.env.NEW_REPO}`;

            core.summary
              .addHeading('Repository Overview', 2)
              .addEOL()
              .addRaw(`Repository Name: ${process.env.NEW_REPO}`)
              .addEOL()
              .addRaw(`Repository Owner: ${process.env.ORG}`)
              .addEOL()
              .addRaw(`Repository URL: ${repoUrl}`)
              .addSeparator();

            await core.summary.write();

            core.setOutput('repository_url', repoUrl);
            core.info(`Repository URL: ${repoUrl}`);
